// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { WifiNetwork } from '../../../open-shock/serialization/types/wifi-network';
import { WifiNetworkEventType } from '../../../open-shock/serialization/types/wifi-network-event-type';


export class WifiNetworkEvent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WifiNetworkEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWifiNetworkEvent(bb:flatbuffers.ByteBuffer, obj?:WifiNetworkEvent):WifiNetworkEvent {
  return (obj || new WifiNetworkEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWifiNetworkEvent(bb:flatbuffers.ByteBuffer, obj?:WifiNetworkEvent):WifiNetworkEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WifiNetworkEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

eventType():WifiNetworkEventType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : WifiNetworkEventType.Discovered;
}

networks(index: number, obj?:WifiNetwork):WifiNetwork|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new WifiNetwork()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

networksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startWifiNetworkEvent(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addEventType(builder:flatbuffers.Builder, eventType:WifiNetworkEventType) {
  builder.addFieldInt8(0, eventType, WifiNetworkEventType.Discovered);
}

static addNetworks(builder:flatbuffers.Builder, networksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, networksOffset, 0);
}

static createNetworksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNetworksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endWifiNetworkEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWifiNetworkEvent(builder:flatbuffers.Builder, eventType:WifiNetworkEventType, networksOffset:flatbuffers.Offset):flatbuffers.Offset {
  WifiNetworkEvent.startWifiNetworkEvent(builder);
  WifiNetworkEvent.addEventType(builder, eventType);
  WifiNetworkEvent.addNetworks(builder, networksOffset);
  return WifiNetworkEvent.endWifiNetworkEvent(builder);
}
}
