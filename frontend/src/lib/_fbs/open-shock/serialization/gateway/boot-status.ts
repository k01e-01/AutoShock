// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FirmwareBootType } from '../../../open-shock/serialization/types/firmware-boot-type';
import { SemVer } from '../../../open-shock/serialization/types/sem-ver';


export class BootStatus {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BootStatus {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBootStatus(bb:flatbuffers.ByteBuffer, obj?:BootStatus):BootStatus {
  return (obj || new BootStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBootStatus(bb:flatbuffers.ByteBuffer, obj?:BootStatus):BootStatus {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BootStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bootType():FirmwareBootType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FirmwareBootType.Normal;
}

firmwareVersion(obj?:SemVer):SemVer|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new SemVer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

otaUpdateId():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startBootStatus(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addBootType(builder:flatbuffers.Builder, bootType:FirmwareBootType) {
  builder.addFieldInt8(0, bootType, FirmwareBootType.Normal);
}

static addFirmwareVersion(builder:flatbuffers.Builder, firmwareVersionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, firmwareVersionOffset, 0);
}

static addOtaUpdateId(builder:flatbuffers.Builder, otaUpdateId:number) {
  builder.addFieldInt32(2, otaUpdateId, 0);
}

static endBootStatus(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
