// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OtaUpdateChannel } from '../../../open-shock/serialization/configuration/ota-update-channel';
import { OtaUpdateStep } from '../../../open-shock/serialization/configuration/ota-update-step';


export class OtaUpdateConfig {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OtaUpdateConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOtaUpdateConfig(bb:flatbuffers.ByteBuffer, obj?:OtaUpdateConfig):OtaUpdateConfig {
  return (obj || new OtaUpdateConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOtaUpdateConfig(bb:flatbuffers.ByteBuffer, obj?:OtaUpdateConfig):OtaUpdateConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OtaUpdateConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Indicates whether OTA updates are enabled.
 */
isEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The domain name of the OTA Content Delivery Network (CDN).
 */
cdnDomain():string|null
cdnDomain(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cdnDomain(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The update channel to use.
 */
updateChannel():OtaUpdateChannel {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : OtaUpdateChannel.Stable;
}

/**
 * Indicates whether to check for updates on startup.
 */
checkOnStartup():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Indicates whether to check for updates periodically.
 */
checkPeriodically():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The interval in minutes between periodic update checks.
 */
checkInterval():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

/**
 * Indicates if the backend is authorized to manage the device's update version on behalf of the user.
 */
allowBackendManagement():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Indicates if manual approval via serial input or captive portal is required before installing updates.
 */
requireManualApproval():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Update process ID, used to track the update process server-side across reboots.
 */
updateId():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Indicates what step of the update process the device is currently in, used to detect failed updates for status reporting.
 */
updateStep():OtaUpdateStep {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : OtaUpdateStep.None;
}

static startOtaUpdateConfig(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addIsEnabled(builder:flatbuffers.Builder, isEnabled:boolean) {
  builder.addFieldInt8(0, +isEnabled, +false);
}

static addCdnDomain(builder:flatbuffers.Builder, cdnDomainOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, cdnDomainOffset, 0);
}

static addUpdateChannel(builder:flatbuffers.Builder, updateChannel:OtaUpdateChannel) {
  builder.addFieldInt8(2, updateChannel, OtaUpdateChannel.Stable);
}

static addCheckOnStartup(builder:flatbuffers.Builder, checkOnStartup:boolean) {
  builder.addFieldInt8(3, +checkOnStartup, +false);
}

static addCheckPeriodically(builder:flatbuffers.Builder, checkPeriodically:boolean) {
  builder.addFieldInt8(4, +checkPeriodically, +false);
}

static addCheckInterval(builder:flatbuffers.Builder, checkInterval:number) {
  builder.addFieldInt16(5, checkInterval, 0);
}

static addAllowBackendManagement(builder:flatbuffers.Builder, allowBackendManagement:boolean) {
  builder.addFieldInt8(6, +allowBackendManagement, +false);
}

static addRequireManualApproval(builder:flatbuffers.Builder, requireManualApproval:boolean) {
  builder.addFieldInt8(7, +requireManualApproval, +false);
}

static addUpdateId(builder:flatbuffers.Builder, updateId:number) {
  builder.addFieldInt32(8, updateId, 0);
}

static addUpdateStep(builder:flatbuffers.Builder, updateStep:OtaUpdateStep) {
  builder.addFieldInt8(9, updateStep, OtaUpdateStep.None);
}

static endOtaUpdateConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOtaUpdateConfig(builder:flatbuffers.Builder, isEnabled:boolean, cdnDomainOffset:flatbuffers.Offset, updateChannel:OtaUpdateChannel, checkOnStartup:boolean, checkPeriodically:boolean, checkInterval:number, allowBackendManagement:boolean, requireManualApproval:boolean, updateId:number, updateStep:OtaUpdateStep):flatbuffers.Offset {
  OtaUpdateConfig.startOtaUpdateConfig(builder);
  OtaUpdateConfig.addIsEnabled(builder, isEnabled);
  OtaUpdateConfig.addCdnDomain(builder, cdnDomainOffset);
  OtaUpdateConfig.addUpdateChannel(builder, updateChannel);
  OtaUpdateConfig.addCheckOnStartup(builder, checkOnStartup);
  OtaUpdateConfig.addCheckPeriodically(builder, checkPeriodically);
  OtaUpdateConfig.addCheckInterval(builder, checkInterval);
  OtaUpdateConfig.addAllowBackendManagement(builder, allowBackendManagement);
  OtaUpdateConfig.addRequireManualApproval(builder, requireManualApproval);
  OtaUpdateConfig.addUpdateId(builder, updateId);
  OtaUpdateConfig.addUpdateStep(builder, updateStep);
  return OtaUpdateConfig.endOtaUpdateConfig(builder);
}
}
