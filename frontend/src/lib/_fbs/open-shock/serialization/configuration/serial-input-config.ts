// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class SerialInputConfig {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SerialInputConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSerialInputConfig(bb:flatbuffers.ByteBuffer, obj?:SerialInputConfig):SerialInputConfig {
  return (obj || new SerialInputConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSerialInputConfig(bb:flatbuffers.ByteBuffer, obj?:SerialInputConfig):SerialInputConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SerialInputConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Whether to echo typed characters back to the serial console
 */
echoEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

static startSerialInputConfig(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addEchoEnabled(builder:flatbuffers.Builder, echoEnabled:boolean) {
  builder.addFieldInt8(0, +echoEnabled, +true);
}

static endSerialInputConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSerialInputConfig(builder:flatbuffers.Builder, echoEnabled:boolean):flatbuffers.Offset {
  SerialInputConfig.startSerialInputConfig(builder);
  SerialInputConfig.addEchoEnabled(builder, echoEnabled);
  return SerialInputConfig.endSerialInputConfig(builder);
}
}
