// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SHOCKERCOMMANDTYPE_OPENSHOCK_SERIALIZATION_TYPES_H_
#define FLATBUFFERS_GENERATED_SHOCKERCOMMANDTYPE_OPENSHOCK_SERIALIZATION_TYPES_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace OpenShock {
namespace Serialization {
namespace Types {

enum class ShockerCommandType : uint8_t {
  Stop = 0,
  Shock = 1,
  Vibrate = 2,
  Sound = 3,
  MIN = Stop,
  MAX = Sound
};

inline const ShockerCommandType (&EnumValuesShockerCommandType())[4] {
  static const ShockerCommandType values[] = {
    ShockerCommandType::Stop,
    ShockerCommandType::Shock,
    ShockerCommandType::Vibrate,
    ShockerCommandType::Sound
  };
  return values;
}

inline const char * const *EnumNamesShockerCommandType() {
  static const char * const names[5] = {
    "Stop",
    "Shock",
    "Vibrate",
    "Sound",
    nullptr
  };
  return names;
}

inline const char *EnumNameShockerCommandType(ShockerCommandType e) {
  if (::flatbuffers::IsOutRange(e, ShockerCommandType::Stop, ShockerCommandType::Sound)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesShockerCommandType()[index];
}

}  // namespace Types
}  // namespace Serialization
}  // namespace OpenShock

#endif  // FLATBUFFERS_GENERATED_SHOCKERCOMMANDTYPE_OPENSHOCK_SERIALIZATION_TYPES_H_
