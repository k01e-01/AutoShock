// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOCALTODEVICEMESSAGE_OPENSHOCK_SERIALIZATION_LOCAL_H_
#define FLATBUFFERS_GENERATED_LOCALTODEVICEMESSAGE_OPENSHOCK_SERIALIZATION_LOCAL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace OpenShock {
namespace Serialization {
namespace Local {

struct WifiScanCommand;

struct WifiNetworkSaveCommand;
struct WifiNetworkSaveCommandBuilder;

struct WifiNetworkForgetCommand;
struct WifiNetworkForgetCommandBuilder;

struct WifiNetworkConnectCommand;
struct WifiNetworkConnectCommandBuilder;

struct WifiNetworkDisconnectCommand;

struct OtaUpdateSetIsEnabledCommand;

struct OtaUpdateSetDomainCommand;
struct OtaUpdateSetDomainCommandBuilder;

struct OtaUpdateSetUpdateChannelCommand;
struct OtaUpdateSetUpdateChannelCommandBuilder;

struct OtaUpdateSetCheckIntervalCommand;

struct OtaUpdateSetAllowBackendManagementCommand;

struct OtaUpdateSetRequireManualApprovalCommand;

struct OtaUpdateHandleUpdateRequestCommand;

struct OtaUpdateCheckForUpdatesCommand;
struct OtaUpdateCheckForUpdatesCommandBuilder;

struct OtaUpdateStartUpdateCommand;
struct OtaUpdateStartUpdateCommandBuilder;

struct AccountLinkCommand;
struct AccountLinkCommandBuilder;

struct AccountUnlinkCommand;

struct SetRfTxPinCommand;

struct LocalToDeviceMessage;
struct LocalToDeviceMessageBuilder;

enum class LocalToDeviceMessagePayload : uint8_t {
  NONE = 0,
  WifiScanCommand = 1,
  WifiNetworkSaveCommand = 2,
  WifiNetworkForgetCommand = 3,
  WifiNetworkConnectCommand = 4,
  WifiNetworkDisconnectCommand = 5,
  OtaUpdateSetIsEnabledCommand = 6,
  OtaUpdateSetDomainCommand = 7,
  OtaUpdateSetUpdateChannelCommand = 8,
  OtaUpdateSetCheckIntervalCommand = 9,
  OtaUpdateSetAllowBackendManagementCommand = 10,
  OtaUpdateSetRequireManualApprovalCommand = 11,
  OtaUpdateHandleUpdateRequestCommand = 12,
  OtaUpdateCheckForUpdatesCommand = 13,
  OtaUpdateStartUpdateCommand = 14,
  AccountLinkCommand = 15,
  AccountUnlinkCommand = 16,
  SetRfTxPinCommand = 17,
  MIN = NONE,
  MAX = SetRfTxPinCommand
};

inline const LocalToDeviceMessagePayload (&EnumValuesLocalToDeviceMessagePayload())[18] {
  static const LocalToDeviceMessagePayload values[] = {
    LocalToDeviceMessagePayload::NONE,
    LocalToDeviceMessagePayload::WifiScanCommand,
    LocalToDeviceMessagePayload::WifiNetworkSaveCommand,
    LocalToDeviceMessagePayload::WifiNetworkForgetCommand,
    LocalToDeviceMessagePayload::WifiNetworkConnectCommand,
    LocalToDeviceMessagePayload::WifiNetworkDisconnectCommand,
    LocalToDeviceMessagePayload::OtaUpdateSetIsEnabledCommand,
    LocalToDeviceMessagePayload::OtaUpdateSetDomainCommand,
    LocalToDeviceMessagePayload::OtaUpdateSetUpdateChannelCommand,
    LocalToDeviceMessagePayload::OtaUpdateSetCheckIntervalCommand,
    LocalToDeviceMessagePayload::OtaUpdateSetAllowBackendManagementCommand,
    LocalToDeviceMessagePayload::OtaUpdateSetRequireManualApprovalCommand,
    LocalToDeviceMessagePayload::OtaUpdateHandleUpdateRequestCommand,
    LocalToDeviceMessagePayload::OtaUpdateCheckForUpdatesCommand,
    LocalToDeviceMessagePayload::OtaUpdateStartUpdateCommand,
    LocalToDeviceMessagePayload::AccountLinkCommand,
    LocalToDeviceMessagePayload::AccountUnlinkCommand,
    LocalToDeviceMessagePayload::SetRfTxPinCommand
  };
  return values;
}

inline const char * const *EnumNamesLocalToDeviceMessagePayload() {
  static const char * const names[19] = {
    "NONE",
    "WifiScanCommand",
    "WifiNetworkSaveCommand",
    "WifiNetworkForgetCommand",
    "WifiNetworkConnectCommand",
    "WifiNetworkDisconnectCommand",
    "OtaUpdateSetIsEnabledCommand",
    "OtaUpdateSetDomainCommand",
    "OtaUpdateSetUpdateChannelCommand",
    "OtaUpdateSetCheckIntervalCommand",
    "OtaUpdateSetAllowBackendManagementCommand",
    "OtaUpdateSetRequireManualApprovalCommand",
    "OtaUpdateHandleUpdateRequestCommand",
    "OtaUpdateCheckForUpdatesCommand",
    "OtaUpdateStartUpdateCommand",
    "AccountLinkCommand",
    "AccountUnlinkCommand",
    "SetRfTxPinCommand",
    nullptr
  };
  return names;
}

inline const char *EnumNameLocalToDeviceMessagePayload(LocalToDeviceMessagePayload e) {
  if (::flatbuffers::IsOutRange(e, LocalToDeviceMessagePayload::NONE, LocalToDeviceMessagePayload::SetRfTxPinCommand)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLocalToDeviceMessagePayload()[index];
}

template<typename T> struct LocalToDeviceMessagePayloadTraits {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::NONE;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::WifiScanCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::WifiScanCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::WifiNetworkSaveCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::WifiNetworkSaveCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::WifiNetworkForgetCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::WifiNetworkForgetCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::WifiNetworkConnectCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::WifiNetworkConnectCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::WifiNetworkDisconnectCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::WifiNetworkDisconnectCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateSetIsEnabledCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::OtaUpdateSetIsEnabledCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateSetDomainCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::OtaUpdateSetDomainCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateSetUpdateChannelCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::OtaUpdateSetUpdateChannelCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateSetCheckIntervalCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::OtaUpdateSetCheckIntervalCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateSetAllowBackendManagementCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::OtaUpdateSetAllowBackendManagementCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateSetRequireManualApprovalCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::OtaUpdateSetRequireManualApprovalCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateHandleUpdateRequestCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::OtaUpdateHandleUpdateRequestCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateCheckForUpdatesCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::OtaUpdateCheckForUpdatesCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::OtaUpdateStartUpdateCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::OtaUpdateStartUpdateCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::AccountLinkCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::AccountLinkCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::AccountUnlinkCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::AccountUnlinkCommand;
};

template<> struct LocalToDeviceMessagePayloadTraits<OpenShock::Serialization::Local::SetRfTxPinCommand> {
  static const LocalToDeviceMessagePayload enum_value = LocalToDeviceMessagePayload::SetRfTxPinCommand;
};

bool VerifyLocalToDeviceMessagePayload(::flatbuffers::Verifier &verifier, const void *obj, LocalToDeviceMessagePayload type);
bool VerifyLocalToDeviceMessagePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<LocalToDeviceMessagePayload> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) WifiScanCommand FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t run_;

 public:
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.WifiScanCommand";
  }
  WifiScanCommand()
      : run_(0) {
  }
  WifiScanCommand(bool _run)
      : run_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_run))) {
  }
  bool run() const {
    return ::flatbuffers::EndianScalar(run_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(WifiScanCommand, 1);

struct WifiScanCommand::Traits {
  using type = WifiScanCommand;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) WifiNetworkDisconnectCommand FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t placeholder_;

 public:
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.WifiNetworkDisconnectCommand";
  }
  WifiNetworkDisconnectCommand()
      : placeholder_(0) {
  }
  WifiNetworkDisconnectCommand(bool _placeholder)
      : placeholder_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_placeholder))) {
  }
  bool placeholder() const {
    return ::flatbuffers::EndianScalar(placeholder_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(WifiNetworkDisconnectCommand, 1);

struct WifiNetworkDisconnectCommand::Traits {
  using type = WifiNetworkDisconnectCommand;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) OtaUpdateSetIsEnabledCommand FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t enabled_;

 public:
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateSetIsEnabledCommand";
  }
  OtaUpdateSetIsEnabledCommand()
      : enabled_(0) {
  }
  OtaUpdateSetIsEnabledCommand(bool _enabled)
      : enabled_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_enabled))) {
  }
  bool enabled() const {
    return ::flatbuffers::EndianScalar(enabled_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(OtaUpdateSetIsEnabledCommand, 1);

struct OtaUpdateSetIsEnabledCommand::Traits {
  using type = OtaUpdateSetIsEnabledCommand;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) OtaUpdateSetCheckIntervalCommand FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t interval_;

 public:
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateSetCheckIntervalCommand";
  }
  OtaUpdateSetCheckIntervalCommand()
      : interval_(0) {
  }
  OtaUpdateSetCheckIntervalCommand(uint16_t _interval)
      : interval_(::flatbuffers::EndianScalar(_interval)) {
  }
  uint16_t interval() const {
    return ::flatbuffers::EndianScalar(interval_);
  }
};
FLATBUFFERS_STRUCT_END(OtaUpdateSetCheckIntervalCommand, 2);

struct OtaUpdateSetCheckIntervalCommand::Traits {
  using type = OtaUpdateSetCheckIntervalCommand;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) OtaUpdateSetAllowBackendManagementCommand FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t allow_;

 public:
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateSetAllowBackendManagementCommand";
  }
  OtaUpdateSetAllowBackendManagementCommand()
      : allow_(0) {
  }
  OtaUpdateSetAllowBackendManagementCommand(bool _allow)
      : allow_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_allow))) {
  }
  bool allow() const {
    return ::flatbuffers::EndianScalar(allow_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(OtaUpdateSetAllowBackendManagementCommand, 1);

struct OtaUpdateSetAllowBackendManagementCommand::Traits {
  using type = OtaUpdateSetAllowBackendManagementCommand;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) OtaUpdateSetRequireManualApprovalCommand FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t require_;

 public:
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateSetRequireManualApprovalCommand";
  }
  OtaUpdateSetRequireManualApprovalCommand()
      : require_(0) {
  }
  OtaUpdateSetRequireManualApprovalCommand(bool _require)
      : require_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_require))) {
  }
  bool require() const {
    return ::flatbuffers::EndianScalar(require_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(OtaUpdateSetRequireManualApprovalCommand, 1);

struct OtaUpdateSetRequireManualApprovalCommand::Traits {
  using type = OtaUpdateSetRequireManualApprovalCommand;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) OtaUpdateHandleUpdateRequestCommand FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t accept_;

 public:
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateHandleUpdateRequestCommand";
  }
  OtaUpdateHandleUpdateRequestCommand()
      : accept_(0) {
  }
  OtaUpdateHandleUpdateRequestCommand(bool _accept)
      : accept_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_accept))) {
  }
  bool accept() const {
    return ::flatbuffers::EndianScalar(accept_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(OtaUpdateHandleUpdateRequestCommand, 1);

struct OtaUpdateHandleUpdateRequestCommand::Traits {
  using type = OtaUpdateHandleUpdateRequestCommand;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) AccountUnlinkCommand FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t placeholder_;

 public:
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.AccountUnlinkCommand";
  }
  AccountUnlinkCommand()
      : placeholder_(0) {
  }
  AccountUnlinkCommand(bool _placeholder)
      : placeholder_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_placeholder))) {
  }
  bool placeholder() const {
    return ::flatbuffers::EndianScalar(placeholder_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(AccountUnlinkCommand, 1);

struct AccountUnlinkCommand::Traits {
  using type = AccountUnlinkCommand;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) SetRfTxPinCommand FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t pin_;

 public:
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.SetRfTxPinCommand";
  }
  SetRfTxPinCommand()
      : pin_(0) {
  }
  SetRfTxPinCommand(uint8_t _pin)
      : pin_(::flatbuffers::EndianScalar(_pin)) {
  }
  uint8_t pin() const {
    return ::flatbuffers::EndianScalar(pin_);
  }
};
FLATBUFFERS_STRUCT_END(SetRfTxPinCommand, 1);

struct SetRfTxPinCommand::Traits {
  using type = SetRfTxPinCommand;
};

struct WifiNetworkSaveCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WifiNetworkSaveCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.WifiNetworkSaveCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SSID = 4,
    VT_PASSWORD = 6,
    VT_CONNECT = 8
  };
  const ::flatbuffers::String *ssid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SSID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool connect() const {
    return GetField<uint8_t>(VT_CONNECT, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SSID) &&
           verifier.VerifyString(ssid()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           VerifyField<uint8_t>(verifier, VT_CONNECT, 1) &&
           verifier.EndTable();
  }
};

struct WifiNetworkSaveCommandBuilder {
  typedef WifiNetworkSaveCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ssid(::flatbuffers::Offset<::flatbuffers::String> ssid) {
    fbb_.AddOffset(WifiNetworkSaveCommand::VT_SSID, ssid);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(WifiNetworkSaveCommand::VT_PASSWORD, password);
  }
  void add_connect(bool connect) {
    fbb_.AddElement<uint8_t>(WifiNetworkSaveCommand::VT_CONNECT, static_cast<uint8_t>(connect), 0);
  }
  explicit WifiNetworkSaveCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WifiNetworkSaveCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WifiNetworkSaveCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WifiNetworkSaveCommand> CreateWifiNetworkSaveCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> ssid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0,
    bool connect = false) {
  WifiNetworkSaveCommandBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_ssid(ssid);
  builder_.add_connect(connect);
  return builder_.Finish();
}

struct WifiNetworkSaveCommand::Traits {
  using type = WifiNetworkSaveCommand;
  static auto constexpr Create = CreateWifiNetworkSaveCommand;
};

inline ::flatbuffers::Offset<WifiNetworkSaveCommand> CreateWifiNetworkSaveCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *ssid = nullptr,
    const char *password = nullptr,
    bool connect = false) {
  auto ssid__ = ssid ? _fbb.CreateString(ssid) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return OpenShock::Serialization::Local::CreateWifiNetworkSaveCommand(
      _fbb,
      ssid__,
      password__,
      connect);
}

struct WifiNetworkForgetCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WifiNetworkForgetCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.WifiNetworkForgetCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SSID = 4
  };
  const ::flatbuffers::String *ssid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SSID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SSID) &&
           verifier.VerifyString(ssid()) &&
           verifier.EndTable();
  }
};

struct WifiNetworkForgetCommandBuilder {
  typedef WifiNetworkForgetCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ssid(::flatbuffers::Offset<::flatbuffers::String> ssid) {
    fbb_.AddOffset(WifiNetworkForgetCommand::VT_SSID, ssid);
  }
  explicit WifiNetworkForgetCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WifiNetworkForgetCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WifiNetworkForgetCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WifiNetworkForgetCommand> CreateWifiNetworkForgetCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> ssid = 0) {
  WifiNetworkForgetCommandBuilder builder_(_fbb);
  builder_.add_ssid(ssid);
  return builder_.Finish();
}

struct WifiNetworkForgetCommand::Traits {
  using type = WifiNetworkForgetCommand;
  static auto constexpr Create = CreateWifiNetworkForgetCommand;
};

inline ::flatbuffers::Offset<WifiNetworkForgetCommand> CreateWifiNetworkForgetCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *ssid = nullptr) {
  auto ssid__ = ssid ? _fbb.CreateString(ssid) : 0;
  return OpenShock::Serialization::Local::CreateWifiNetworkForgetCommand(
      _fbb,
      ssid__);
}

struct WifiNetworkConnectCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WifiNetworkConnectCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.WifiNetworkConnectCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SSID = 4
  };
  const ::flatbuffers::String *ssid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SSID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SSID) &&
           verifier.VerifyString(ssid()) &&
           verifier.EndTable();
  }
};

struct WifiNetworkConnectCommandBuilder {
  typedef WifiNetworkConnectCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ssid(::flatbuffers::Offset<::flatbuffers::String> ssid) {
    fbb_.AddOffset(WifiNetworkConnectCommand::VT_SSID, ssid);
  }
  explicit WifiNetworkConnectCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WifiNetworkConnectCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WifiNetworkConnectCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WifiNetworkConnectCommand> CreateWifiNetworkConnectCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> ssid = 0) {
  WifiNetworkConnectCommandBuilder builder_(_fbb);
  builder_.add_ssid(ssid);
  return builder_.Finish();
}

struct WifiNetworkConnectCommand::Traits {
  using type = WifiNetworkConnectCommand;
  static auto constexpr Create = CreateWifiNetworkConnectCommand;
};

inline ::flatbuffers::Offset<WifiNetworkConnectCommand> CreateWifiNetworkConnectCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *ssid = nullptr) {
  auto ssid__ = ssid ? _fbb.CreateString(ssid) : 0;
  return OpenShock::Serialization::Local::CreateWifiNetworkConnectCommand(
      _fbb,
      ssid__);
}

struct OtaUpdateSetDomainCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaUpdateSetDomainCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateSetDomainCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DOMAIN = 4
  };
  const ::flatbuffers::String *domain() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DOMAIN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DOMAIN) &&
           verifier.VerifyString(domain()) &&
           verifier.EndTable();
  }
};

struct OtaUpdateSetDomainCommandBuilder {
  typedef OtaUpdateSetDomainCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_domain(::flatbuffers::Offset<::flatbuffers::String> domain) {
    fbb_.AddOffset(OtaUpdateSetDomainCommand::VT_DOMAIN, domain);
  }
  explicit OtaUpdateSetDomainCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaUpdateSetDomainCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaUpdateSetDomainCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaUpdateSetDomainCommand> CreateOtaUpdateSetDomainCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> domain = 0) {
  OtaUpdateSetDomainCommandBuilder builder_(_fbb);
  builder_.add_domain(domain);
  return builder_.Finish();
}

struct OtaUpdateSetDomainCommand::Traits {
  using type = OtaUpdateSetDomainCommand;
  static auto constexpr Create = CreateOtaUpdateSetDomainCommand;
};

inline ::flatbuffers::Offset<OtaUpdateSetDomainCommand> CreateOtaUpdateSetDomainCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *domain = nullptr) {
  auto domain__ = domain ? _fbb.CreateString(domain) : 0;
  return OpenShock::Serialization::Local::CreateOtaUpdateSetDomainCommand(
      _fbb,
      domain__);
}

struct OtaUpdateSetUpdateChannelCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaUpdateSetUpdateChannelCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateSetUpdateChannelCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHANNEL = 4
  };
  const ::flatbuffers::String *channel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHANNEL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHANNEL) &&
           verifier.VerifyString(channel()) &&
           verifier.EndTable();
  }
};

struct OtaUpdateSetUpdateChannelCommandBuilder {
  typedef OtaUpdateSetUpdateChannelCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_channel(::flatbuffers::Offset<::flatbuffers::String> channel) {
    fbb_.AddOffset(OtaUpdateSetUpdateChannelCommand::VT_CHANNEL, channel);
  }
  explicit OtaUpdateSetUpdateChannelCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaUpdateSetUpdateChannelCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaUpdateSetUpdateChannelCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaUpdateSetUpdateChannelCommand> CreateOtaUpdateSetUpdateChannelCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> channel = 0) {
  OtaUpdateSetUpdateChannelCommandBuilder builder_(_fbb);
  builder_.add_channel(channel);
  return builder_.Finish();
}

struct OtaUpdateSetUpdateChannelCommand::Traits {
  using type = OtaUpdateSetUpdateChannelCommand;
  static auto constexpr Create = CreateOtaUpdateSetUpdateChannelCommand;
};

inline ::flatbuffers::Offset<OtaUpdateSetUpdateChannelCommand> CreateOtaUpdateSetUpdateChannelCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *channel = nullptr) {
  auto channel__ = channel ? _fbb.CreateString(channel) : 0;
  return OpenShock::Serialization::Local::CreateOtaUpdateSetUpdateChannelCommand(
      _fbb,
      channel__);
}

struct OtaUpdateCheckForUpdatesCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaUpdateCheckForUpdatesCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateCheckForUpdatesCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHANNEL = 4
  };
  const ::flatbuffers::String *channel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHANNEL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHANNEL) &&
           verifier.VerifyString(channel()) &&
           verifier.EndTable();
  }
};

struct OtaUpdateCheckForUpdatesCommandBuilder {
  typedef OtaUpdateCheckForUpdatesCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_channel(::flatbuffers::Offset<::flatbuffers::String> channel) {
    fbb_.AddOffset(OtaUpdateCheckForUpdatesCommand::VT_CHANNEL, channel);
  }
  explicit OtaUpdateCheckForUpdatesCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaUpdateCheckForUpdatesCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaUpdateCheckForUpdatesCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaUpdateCheckForUpdatesCommand> CreateOtaUpdateCheckForUpdatesCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> channel = 0) {
  OtaUpdateCheckForUpdatesCommandBuilder builder_(_fbb);
  builder_.add_channel(channel);
  return builder_.Finish();
}

struct OtaUpdateCheckForUpdatesCommand::Traits {
  using type = OtaUpdateCheckForUpdatesCommand;
  static auto constexpr Create = CreateOtaUpdateCheckForUpdatesCommand;
};

inline ::flatbuffers::Offset<OtaUpdateCheckForUpdatesCommand> CreateOtaUpdateCheckForUpdatesCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *channel = nullptr) {
  auto channel__ = channel ? _fbb.CreateString(channel) : 0;
  return OpenShock::Serialization::Local::CreateOtaUpdateCheckForUpdatesCommand(
      _fbb,
      channel__);
}

struct OtaUpdateStartUpdateCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtaUpdateStartUpdateCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.OtaUpdateStartUpdateCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHANNEL = 4,
    VT_VERSION = 6
  };
  const ::flatbuffers::String *channel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHANNEL);
  }
  const ::flatbuffers::String *version() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VERSION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHANNEL) &&
           verifier.VerifyString(channel()) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           verifier.EndTable();
  }
};

struct OtaUpdateStartUpdateCommandBuilder {
  typedef OtaUpdateStartUpdateCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_channel(::flatbuffers::Offset<::flatbuffers::String> channel) {
    fbb_.AddOffset(OtaUpdateStartUpdateCommand::VT_CHANNEL, channel);
  }
  void add_version(::flatbuffers::Offset<::flatbuffers::String> version) {
    fbb_.AddOffset(OtaUpdateStartUpdateCommand::VT_VERSION, version);
  }
  explicit OtaUpdateStartUpdateCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OtaUpdateStartUpdateCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OtaUpdateStartUpdateCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OtaUpdateStartUpdateCommand> CreateOtaUpdateStartUpdateCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> channel = 0,
    ::flatbuffers::Offset<::flatbuffers::String> version = 0) {
  OtaUpdateStartUpdateCommandBuilder builder_(_fbb);
  builder_.add_version(version);
  builder_.add_channel(channel);
  return builder_.Finish();
}

struct OtaUpdateStartUpdateCommand::Traits {
  using type = OtaUpdateStartUpdateCommand;
  static auto constexpr Create = CreateOtaUpdateStartUpdateCommand;
};

inline ::flatbuffers::Offset<OtaUpdateStartUpdateCommand> CreateOtaUpdateStartUpdateCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *channel = nullptr,
    const char *version = nullptr) {
  auto channel__ = channel ? _fbb.CreateString(channel) : 0;
  auto version__ = version ? _fbb.CreateString(version) : 0;
  return OpenShock::Serialization::Local::CreateOtaUpdateStartUpdateCommand(
      _fbb,
      channel__,
      version__);
}

struct AccountLinkCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AccountLinkCommandBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.AccountLinkCommand";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE = 4
  };
  const ::flatbuffers::String *code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CODE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CODE) &&
           verifier.VerifyString(code()) &&
           verifier.EndTable();
  }
};

struct AccountLinkCommandBuilder {
  typedef AccountLinkCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_code(::flatbuffers::Offset<::flatbuffers::String> code) {
    fbb_.AddOffset(AccountLinkCommand::VT_CODE, code);
  }
  explicit AccountLinkCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AccountLinkCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AccountLinkCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AccountLinkCommand> CreateAccountLinkCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> code = 0) {
  AccountLinkCommandBuilder builder_(_fbb);
  builder_.add_code(code);
  return builder_.Finish();
}

struct AccountLinkCommand::Traits {
  using type = AccountLinkCommand;
  static auto constexpr Create = CreateAccountLinkCommand;
};

inline ::flatbuffers::Offset<AccountLinkCommand> CreateAccountLinkCommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *code = nullptr) {
  auto code__ = code ? _fbb.CreateString(code) : 0;
  return OpenShock::Serialization::Local::CreateAccountLinkCommand(
      _fbb,
      code__);
}

struct LocalToDeviceMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LocalToDeviceMessageBuilder Builder;
  struct Traits;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "OpenShock.Serialization.Local.LocalToDeviceMessage";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  OpenShock::Serialization::Local::LocalToDeviceMessagePayload payload_type() const {
    return static_cast<OpenShock::Serialization::Local::LocalToDeviceMessagePayload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const OpenShock::Serialization::Local::WifiScanCommand *payload_as_WifiScanCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::WifiScanCommand ? static_cast<const OpenShock::Serialization::Local::WifiScanCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::WifiNetworkSaveCommand *payload_as_WifiNetworkSaveCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::WifiNetworkSaveCommand ? static_cast<const OpenShock::Serialization::Local::WifiNetworkSaveCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::WifiNetworkForgetCommand *payload_as_WifiNetworkForgetCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::WifiNetworkForgetCommand ? static_cast<const OpenShock::Serialization::Local::WifiNetworkForgetCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::WifiNetworkConnectCommand *payload_as_WifiNetworkConnectCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::WifiNetworkConnectCommand ? static_cast<const OpenShock::Serialization::Local::WifiNetworkConnectCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::WifiNetworkDisconnectCommand *payload_as_WifiNetworkDisconnectCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::WifiNetworkDisconnectCommand ? static_cast<const OpenShock::Serialization::Local::WifiNetworkDisconnectCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateSetIsEnabledCommand *payload_as_OtaUpdateSetIsEnabledCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::OtaUpdateSetIsEnabledCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateSetIsEnabledCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateSetDomainCommand *payload_as_OtaUpdateSetDomainCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::OtaUpdateSetDomainCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateSetDomainCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateSetUpdateChannelCommand *payload_as_OtaUpdateSetUpdateChannelCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::OtaUpdateSetUpdateChannelCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateSetUpdateChannelCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateSetCheckIntervalCommand *payload_as_OtaUpdateSetCheckIntervalCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::OtaUpdateSetCheckIntervalCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateSetCheckIntervalCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateSetAllowBackendManagementCommand *payload_as_OtaUpdateSetAllowBackendManagementCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::OtaUpdateSetAllowBackendManagementCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateSetAllowBackendManagementCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateSetRequireManualApprovalCommand *payload_as_OtaUpdateSetRequireManualApprovalCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::OtaUpdateSetRequireManualApprovalCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateSetRequireManualApprovalCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateHandleUpdateRequestCommand *payload_as_OtaUpdateHandleUpdateRequestCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::OtaUpdateHandleUpdateRequestCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateHandleUpdateRequestCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateCheckForUpdatesCommand *payload_as_OtaUpdateCheckForUpdatesCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::OtaUpdateCheckForUpdatesCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateCheckForUpdatesCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::OtaUpdateStartUpdateCommand *payload_as_OtaUpdateStartUpdateCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::OtaUpdateStartUpdateCommand ? static_cast<const OpenShock::Serialization::Local::OtaUpdateStartUpdateCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::AccountLinkCommand *payload_as_AccountLinkCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::AccountLinkCommand ? static_cast<const OpenShock::Serialization::Local::AccountLinkCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::AccountUnlinkCommand *payload_as_AccountUnlinkCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::AccountUnlinkCommand ? static_cast<const OpenShock::Serialization::Local::AccountUnlinkCommand *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::Local::SetRfTxPinCommand *payload_as_SetRfTxPinCommand() const {
    return payload_type() == OpenShock::Serialization::Local::LocalToDeviceMessagePayload::SetRfTxPinCommand ? static_cast<const OpenShock::Serialization::Local::SetRfTxPinCommand *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyLocalToDeviceMessagePayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const OpenShock::Serialization::Local::WifiScanCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::WifiScanCommand>() const {
  return payload_as_WifiScanCommand();
}

template<> inline const OpenShock::Serialization::Local::WifiNetworkSaveCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::WifiNetworkSaveCommand>() const {
  return payload_as_WifiNetworkSaveCommand();
}

template<> inline const OpenShock::Serialization::Local::WifiNetworkForgetCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::WifiNetworkForgetCommand>() const {
  return payload_as_WifiNetworkForgetCommand();
}

template<> inline const OpenShock::Serialization::Local::WifiNetworkConnectCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::WifiNetworkConnectCommand>() const {
  return payload_as_WifiNetworkConnectCommand();
}

template<> inline const OpenShock::Serialization::Local::WifiNetworkDisconnectCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::WifiNetworkDisconnectCommand>() const {
  return payload_as_WifiNetworkDisconnectCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateSetIsEnabledCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateSetIsEnabledCommand>() const {
  return payload_as_OtaUpdateSetIsEnabledCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateSetDomainCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateSetDomainCommand>() const {
  return payload_as_OtaUpdateSetDomainCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateSetUpdateChannelCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateSetUpdateChannelCommand>() const {
  return payload_as_OtaUpdateSetUpdateChannelCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateSetCheckIntervalCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateSetCheckIntervalCommand>() const {
  return payload_as_OtaUpdateSetCheckIntervalCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateSetAllowBackendManagementCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateSetAllowBackendManagementCommand>() const {
  return payload_as_OtaUpdateSetAllowBackendManagementCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateSetRequireManualApprovalCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateSetRequireManualApprovalCommand>() const {
  return payload_as_OtaUpdateSetRequireManualApprovalCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateHandleUpdateRequestCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateHandleUpdateRequestCommand>() const {
  return payload_as_OtaUpdateHandleUpdateRequestCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateCheckForUpdatesCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateCheckForUpdatesCommand>() const {
  return payload_as_OtaUpdateCheckForUpdatesCommand();
}

template<> inline const OpenShock::Serialization::Local::OtaUpdateStartUpdateCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::OtaUpdateStartUpdateCommand>() const {
  return payload_as_OtaUpdateStartUpdateCommand();
}

template<> inline const OpenShock::Serialization::Local::AccountLinkCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::AccountLinkCommand>() const {
  return payload_as_AccountLinkCommand();
}

template<> inline const OpenShock::Serialization::Local::AccountUnlinkCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::AccountUnlinkCommand>() const {
  return payload_as_AccountUnlinkCommand();
}

template<> inline const OpenShock::Serialization::Local::SetRfTxPinCommand *LocalToDeviceMessage::payload_as<OpenShock::Serialization::Local::SetRfTxPinCommand>() const {
  return payload_as_SetRfTxPinCommand();
}

struct LocalToDeviceMessageBuilder {
  typedef LocalToDeviceMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(OpenShock::Serialization::Local::LocalToDeviceMessagePayload payload_type) {
    fbb_.AddElement<uint8_t>(LocalToDeviceMessage::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(LocalToDeviceMessage::VT_PAYLOAD, payload);
  }
  explicit LocalToDeviceMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LocalToDeviceMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LocalToDeviceMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LocalToDeviceMessage> CreateLocalToDeviceMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    OpenShock::Serialization::Local::LocalToDeviceMessagePayload payload_type = OpenShock::Serialization::Local::LocalToDeviceMessagePayload::NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  LocalToDeviceMessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

struct LocalToDeviceMessage::Traits {
  using type = LocalToDeviceMessage;
  static auto constexpr Create = CreateLocalToDeviceMessage;
};

inline bool VerifyLocalToDeviceMessagePayload(::flatbuffers::Verifier &verifier, const void *obj, LocalToDeviceMessagePayload type) {
  switch (type) {
    case LocalToDeviceMessagePayload::NONE: {
      return true;
    }
    case LocalToDeviceMessagePayload::WifiScanCommand: {
      return verifier.VerifyField<OpenShock::Serialization::Local::WifiScanCommand>(static_cast<const uint8_t *>(obj), 0, 1);
    }
    case LocalToDeviceMessagePayload::WifiNetworkSaveCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::WifiNetworkSaveCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToDeviceMessagePayload::WifiNetworkForgetCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::WifiNetworkForgetCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToDeviceMessagePayload::WifiNetworkConnectCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::WifiNetworkConnectCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToDeviceMessagePayload::WifiNetworkDisconnectCommand: {
      return verifier.VerifyField<OpenShock::Serialization::Local::WifiNetworkDisconnectCommand>(static_cast<const uint8_t *>(obj), 0, 1);
    }
    case LocalToDeviceMessagePayload::OtaUpdateSetIsEnabledCommand: {
      return verifier.VerifyField<OpenShock::Serialization::Local::OtaUpdateSetIsEnabledCommand>(static_cast<const uint8_t *>(obj), 0, 1);
    }
    case LocalToDeviceMessagePayload::OtaUpdateSetDomainCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::OtaUpdateSetDomainCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToDeviceMessagePayload::OtaUpdateSetUpdateChannelCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::OtaUpdateSetUpdateChannelCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToDeviceMessagePayload::OtaUpdateSetCheckIntervalCommand: {
      return verifier.VerifyField<OpenShock::Serialization::Local::OtaUpdateSetCheckIntervalCommand>(static_cast<const uint8_t *>(obj), 0, 2);
    }
    case LocalToDeviceMessagePayload::OtaUpdateSetAllowBackendManagementCommand: {
      return verifier.VerifyField<OpenShock::Serialization::Local::OtaUpdateSetAllowBackendManagementCommand>(static_cast<const uint8_t *>(obj), 0, 1);
    }
    case LocalToDeviceMessagePayload::OtaUpdateSetRequireManualApprovalCommand: {
      return verifier.VerifyField<OpenShock::Serialization::Local::OtaUpdateSetRequireManualApprovalCommand>(static_cast<const uint8_t *>(obj), 0, 1);
    }
    case LocalToDeviceMessagePayload::OtaUpdateHandleUpdateRequestCommand: {
      return verifier.VerifyField<OpenShock::Serialization::Local::OtaUpdateHandleUpdateRequestCommand>(static_cast<const uint8_t *>(obj), 0, 1);
    }
    case LocalToDeviceMessagePayload::OtaUpdateCheckForUpdatesCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::OtaUpdateCheckForUpdatesCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToDeviceMessagePayload::OtaUpdateStartUpdateCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::OtaUpdateStartUpdateCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToDeviceMessagePayload::AccountLinkCommand: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::Local::AccountLinkCommand *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LocalToDeviceMessagePayload::AccountUnlinkCommand: {
      return verifier.VerifyField<OpenShock::Serialization::Local::AccountUnlinkCommand>(static_cast<const uint8_t *>(obj), 0, 1);
    }
    case LocalToDeviceMessagePayload::SetRfTxPinCommand: {
      return verifier.VerifyField<OpenShock::Serialization::Local::SetRfTxPinCommand>(static_cast<const uint8_t *>(obj), 0, 1);
    }
    default: return true;
  }
}

inline bool VerifyLocalToDeviceMessagePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<LocalToDeviceMessagePayload> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyLocalToDeviceMessagePayload(
        verifier,  values->Get(i), types->GetEnum<LocalToDeviceMessagePayload>(i))) {
      return false;
    }
  }
  return true;
}

inline const OpenShock::Serialization::Local::LocalToDeviceMessage *GetLocalToDeviceMessage(const void *buf) {
  return ::flatbuffers::GetRoot<OpenShock::Serialization::Local::LocalToDeviceMessage>(buf);
}

inline const OpenShock::Serialization::Local::LocalToDeviceMessage *GetSizePrefixedLocalToDeviceMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OpenShock::Serialization::Local::LocalToDeviceMessage>(buf);
}

inline bool VerifyLocalToDeviceMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OpenShock::Serialization::Local::LocalToDeviceMessage>(nullptr);
}

inline bool VerifySizePrefixedLocalToDeviceMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OpenShock::Serialization::Local::LocalToDeviceMessage>(nullptr);
}

inline void FinishLocalToDeviceMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OpenShock::Serialization::Local::LocalToDeviceMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLocalToDeviceMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OpenShock::Serialization::Local::LocalToDeviceMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Local
}  // namespace Serialization
}  // namespace OpenShock

#endif  // FLATBUFFERS_GENERATED_LOCALTODEVICEMESSAGE_OPENSHOCK_SERIALIZATION_LOCAL_H_
