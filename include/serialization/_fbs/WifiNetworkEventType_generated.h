// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WIFINETWORKEVENTTYPE_OPENSHOCK_SERIALIZATION_TYPES_H_
#define FLATBUFFERS_GENERATED_WIFINETWORKEVENTTYPE_OPENSHOCK_SERIALIZATION_TYPES_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace OpenShock {
namespace Serialization {
namespace Types {

enum class WifiNetworkEventType : uint8_t {
  Discovered = 0,
  Updated = 1,
  Lost = 2,
  Saved = 3,
  Removed = 4,
  Connected = 5,
  Disconnected = 6,
  MIN = Discovered,
  MAX = Disconnected
};

inline const WifiNetworkEventType (&EnumValuesWifiNetworkEventType())[7] {
  static const WifiNetworkEventType values[] = {
    WifiNetworkEventType::Discovered,
    WifiNetworkEventType::Updated,
    WifiNetworkEventType::Lost,
    WifiNetworkEventType::Saved,
    WifiNetworkEventType::Removed,
    WifiNetworkEventType::Connected,
    WifiNetworkEventType::Disconnected
  };
  return values;
}

inline const char * const *EnumNamesWifiNetworkEventType() {
  static const char * const names[8] = {
    "Discovered",
    "Updated",
    "Lost",
    "Saved",
    "Removed",
    "Connected",
    "Disconnected",
    nullptr
  };
  return names;
}

inline const char *EnumNameWifiNetworkEventType(WifiNetworkEventType e) {
  if (::flatbuffers::IsOutRange(e, WifiNetworkEventType::Discovered, WifiNetworkEventType::Disconnected)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesWifiNetworkEventType()[index];
}

}  // namespace Types
}  // namespace Serialization
}  // namespace OpenShock

#endif  // FLATBUFFERS_GENERATED_WIFINETWORKEVENTTYPE_OPENSHOCK_SERIALIZATION_TYPES_H_
